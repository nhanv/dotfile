# Header
snippet hdoc
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
snippet main
	public static void main (String [] args)
	{
		${1:/* code */}
	}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet sta
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet def
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet thr
	throw 
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet j.a
	java.awt.
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	else if (${1:/* condition */}) {
		${2:// code...}
	}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4: // code...}
	}
snippet forup
	for (int ${1:i} = ${2:n}; $1 >= 0; ${3:--}$1) {
		${4: // code...}
	}
snippet foro
	for (${2:cur} = ${3:start}; $2 != ${1:null}; $2 = $2.${4:next}) {
		${5: // code...}
	}
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet sw
	switch (${1}) ${2}
snippet cs
	case ${1}:
		${2}
	${3}
snippet clex
	public class ${1:`Filename()`} extends  ${2:TestCase}
snippet climp
	public class ${1:`Filename()`} implements  ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	public class ${1:`Filename("", "untitled")`} ${2}
snippet inte
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
